generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  password              String?
  name                  String?
  username              String               @unique
  image                 String?
  emailVerified         DateTime?
  githubConnected       Boolean              @default(false)
  githubUsername        String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  role                  String               @default("USER")
  lastActive            DateTime?
  accounts              Account[]
  activites             Activity[]
  adminLead             AdminLead?
  createChallenges      Challenge[]          @relation("ChallengeCreator")
  challengeAttempts     ChallengeAttempt[]
  challengeLikes        ChallengeLike[]
  createdContests       Contest[]            @relation("ContestCreator")
  contestParticipations ContestParticipant[]
  sessions              Session[]
  submissions           Submission[]
  userProfile           UserProfile?
}

model UserProfile {
  id                String     @id @default(cuid())
  userId            String     @unique
  rank              Int?
  bio               String     @default("No bio provided")
  phone             String?
  solved            Int
  preferredLanguage String
  level             Int
  points            Int
  streakDays        Int
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [id])
  badges            Badge[]    @relation("BadgeToUserProfile")
  languages         Language[] @relation("LanguageToUserProfile")
}

model Activity {
  id        String       @id @default(cuid())
  userId    String
  type      ActivityType
  name      String
  result    String
  points    Int
  time      String
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([email, token])
}

model Badge {
  id          String        @id @default(cuid())
  name        String
  description String
  iconType    String
  points      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserProfile[] @relation("BadgeToUserProfile")
}

model Language {
  id                 String              @id @default(cuid())
  name               String
  percentage         Float
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  contestSubmissions ContestSubmission[]
  submissions        Submission[]
  challenges         Challenge[]         @relation("ChallengeLanguages")
  userProfile        UserProfile[]       @relation("LanguageToUserProfile")
}

model Contest {
  id              String               @id @default(cuid())
  title           String
  description     String
  createdAt       DateTime             @default(now())
  startsAt        DateTime
  endsAt          DateTime
  registrationEnd DateTime
  status          ContestStatus        @default(UPCOMING)
  creatorId       String
  tags            String[]
  maxParticipants Int?
  updatedAt       DateTime             @updatedAt
  points          Int                  @default(0)
  creator         User                 @relation("ContestCreator", fields: [creatorId], references: [id])
  challenges      ContestChallenge[]
  participants    ContestParticipant[]
}

model ContestParticipant {
  id          String              @id @default(cuid())
  userId      String
  contestId   String
  joinedAt    DateTime            @default(now())
  points      Int                 @default(0)
  rank        Int?
  contest     Contest             @relation(fields: [contestId], references: [id])
  user        User                @relation(fields: [userId], references: [id])
  submissions ContestSubmission[]

  @@unique([userId, contestId])
}

model ContestChallenge {
  id          String              @id @default(cuid())
  contestId   String
  challengeId String
  points      Int
  order       Int
  challenge   Challenge           @relation(fields: [challengeId], references: [id])
  contest     Contest             @relation(fields: [contestId], references: [id])
  submissions ContestSubmission[]

  @@unique([contestId, challengeId])
}

model ContestSubmission {
  id                 String             @id @default(cuid())
  participantId      String
  contestChallengeId String
  code               String
  languageId         String
  status             SubmissionStatus
  points             Int                @default(0)
  runtime            Int?
  memory             Int?
  createdAt          DateTime           @default(now())
  testResults        Json?
  contestChallenge   ContestChallenge   @relation(fields: [contestChallengeId], references: [id])
  language           Language           @relation(fields: [languageId], references: [id])
  participant        ContestParticipant @relation(fields: [participantId], references: [id])

  @@unique([participantId, contestChallengeId])
}

model Challenge {
  id                String             @id @default(cuid())
  title             String
  description       String
  difficulty        Difficulty
  points            Int
  creatorId         String
  challengeType     ChallengeType?
  categoryId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  timeLimit         Int
  memoryLimit       Int
  category          ChallengeCategory  @relation(fields: [categoryId], references: [id])
  creator           User               @relation("ChallengeCreator", fields: [creatorId], references: [id])
  attempts          ChallengeAttempt[]
  likes             ChallengeLike[]
  contestChallenges ContestChallenge[]
  submissions       Submission[]
  testCases         TestCase[]
  languages         Language[]         @relation("ChallengeLanguages")
}

model ChallengeCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  challenges  Challenge[]
}

model TestCase {
  id          String    @id @default(cuid())
  challengeId String
  input       String
  output      String
  isHidden    Boolean   @default(false)
  explanation String?
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Submission {
  id          String           @id @default(cuid())
  userId      String
  challengeId String
  code        String
  languageId  String
  status      SubmissionStatus
  runtime     Int?
  memory      Int?
  createdAt   DateTime         @default(now())
  testResults Json?
  score       Int              @default(0)
  challenge   Challenge        @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  language    Language         @relation(fields: [languageId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChallengeAttempt {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  successful  Boolean?
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChallengeLike {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  isLike      Boolean
  createdAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

model AdminLead {
  id               String   @id @default(cuid())
  userId           String   @unique
  department       String
  responsibilities String[]
  accessLevel      Int      @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

enum ContestStatus {
  UPCOMING
  REGISTRATION_OPEN
  ONGOING
  FINISHED
  CANCELLED
}

enum ChallengeType {
  SYSTEM_DESIGN
  ALGORITHM
  DATA_STRUCTURE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum ActivityType {
  CHALLENGE
  CONTEST
  BADGE
  DISCUSSION
}
